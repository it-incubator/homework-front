import React, { useEffect } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { ThemeMode } from '@/app/app-reducer.ts'
import s from './ThemeSwitcher.module.css'

/*
 * Sprint-3, Homework-11
 *  üìù –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
 * */

export const THEME_KEY = 'themeMode' // –∫–ª—é—á –≤ LocalStorage

export const ThemeSwitcher = () => {
  const dispatch = useDispatch()
  const themeMode = 'light' // üìù 1. –ü–æ–ª—É—á–∏ —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –∏–∑ Redux

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedTheme = e.target.value as ThemeMode
    // üìù  2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É –≤ redux state
  }

  // üßô‚Äç‚ôÇÔ∏è –ü—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É –≤ localStorage
  // –∏ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–µ –≤ redux state
  useEffect(() => {
    const savedTheme = localStorage.getItem(THEME_KEY) as ThemeMode | null
    if (savedTheme) {
      // üìù 3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Ç–µ–º—É –≤ redux state
    }
  }, [dispatch])

  // üßô‚Äç –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–º—ã –≤ redux state, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–µ –≤ localStorage
  // –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ html —ç–ª–µ–º–µ–Ω—Ç–µ –∞—Ç—Ä–∏–±—É—Ç data-theme
  useEffect(() => {
    if (themeMode) {
      localStorage.setItem(THEME_KEY, themeMode)
      // @ts-expect-error - –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å!
      if (themeMode === 'system') {
        // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç—ë–º–Ω—É—é —Ç–µ–º—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–≤–æ–µ–π –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
        document.documentElement.setAttribute('data-theme', prefersDark ? 'dark' : 'light')
      } else {
        document.documentElement.setAttribute('data-theme', themeMode)
      }
    }
  }, [themeMode])

  return (
    <div id="hw11" className={s.box}>
      <ul className={s.themeList}>
        <li className={s.themeItem}>
          <label htmlFor="hw11-light">
            <input
              type="radio"
              id="hw11-light"
              name="theme"
              value="light"
              checked={themeMode === 'light'}
              onChange={handleChange}
            />
            –°–≤–µ—Ç–ª–∞—è
          </label>
        </li>
        <li className={s.themeItem}>
          <label htmlFor="hw11-dark">
            <input
              type="radio"
              id="hw11-dark"
              name="theme"
              value="dark"
              // @ts-expect-error - –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å!
              checked={themeMode === 'dark'}
              onChange={handleChange}
            />
            –¢—ë–º–Ω–∞—è
          </label>
        </li>
        <li className={s.themeItem}>
          <label htmlFor="hw11-system">
            <input
              type="radio"
              id="hw11-system"
              name="theme"
              value="system"
              // @ts-expect-error - –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å!
              checked={themeMode === 'system'}
              onChange={handleChange}
            />
            –°–∏—Å—Ç–µ–º–Ω–∞—è
          </label>
        </li>
      </ul>
    </div>
  )
}
